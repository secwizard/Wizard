using AccountsReceivable.API.Data;
using AccountsReceivable.API.Models;
using AccountsReceivable.API.Models.RequestModel;
using AccountsReceivable.API.Services.Interface;
using AccountsReceivable.API.ViewModels;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace AccountsReceivable.API.Services
{
    public class CashBackMasterService : ICashBackMasterService
    {
        private readonly AccountReceivableDataContext _context;
        private readonly IMapper _mapper;
        public CashBackMasterService(AccountReceivableDataContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }
        public async Task<CashbackMasterRequest> AddOrUpdateCashBackMaster(CashbackMasterRequest dto)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (dto != null)
                    {
                        if (dto.CustomerId != null)
                        {
                            CashBackMasters CashBackMaster = await _context.CashBackMaster.FirstOrDefaultAsync(x => x.CustomerId == dto.CustomerId);
                            if (CashBackMaster == null)
                            {
                                CashBackMaster = new CashBackMasters();
                                CashBackMasters CashBackMasterData = _mapper.Map<CashbackMasterRequest, CashBackMasters>(dto);
                                _context.CashBackMaster.Add(CashBackMasterData);
                            }
                            else
                            {
                                _context.Entry(CashBackMaster).CurrentValues.SetValues(dto);
                            }
                            int id = await _context.SaveChangesAsync();
                            if (id > 0)
                            {
                                CashBackTransaction cashbackTrans = await _context.CashBackTransaction.FirstOrDefaultAsync(x => x.CustomerId == dto.CustomerId);
                                CashBackTransaction cashbacktransaction = new CashBackTransaction();
                                if (cashbackTrans == null)
                                {
                                    cashbacktransaction.CustomerId = dto.CustomerId;
                                    cashbacktransaction.AutogeneratedCashVackValue = dto.MaximumCashbackAmount;
                                    cashbacktransaction.ActualCashbackValue = dto.MaximumCashbackAmount;
                                    cashbacktransaction.AppliedDateTime = DateTime.UtcNow;
                                    cashbacktransaction.IsActive = true;
                                    _context.CashBackTransaction.Add(cashbacktransaction);
                                }
                                else
                                {
                                    _context.Entry(cashbackTrans).CurrentValues.SetValues(dto);
                                }
                                await _context.SaveChangesAsync();
                                CustomerWallet CustomerWallet = await _context.CustomerWallet.FirstOrDefaultAsync(x => x.CustomerId == dto.CustomerId);
                                if (CustomerWallet != null)
                                {
                                    CustomerWallet CustomerWalletOld = new CustomerWallet();
                                    CustomerWalletOld.CreditLimit = CustomerWallet.CreditLimit + dto.MaximumCashbackAmount;
                                    CustomerWallet.CreditLimit = CustomerWalletOld.CreditLimit;
                                    //_context.Entry(CustomerWallet).CurrentValues.SetValues(CustomerWalletOld);
                                    await _context.SaveChangesAsync();
                                    CustomerWalletTransaction customerWalletTransaction = new CustomerWalletTransaction();
                                    customerWalletTransaction.CustomerWalletId = CustomerWallet.CustomerWalletId;
                                    customerWalletTransaction.TransactionAmount = dto.MaximumCashbackAmount;
                                    customerWalletTransaction.TransactionType = "CashbackDeposit";
                                    customerWalletTransaction.TransactionModeId = 11;
                                    customerWalletTransaction.CustomerId = dto.CustomerId;
                                    _context.CustomerWalletTransaction.Add(customerWalletTransaction);
                                    await _context.SaveChangesAsync();
                                    CustomerWalletTransactionDetail CustoWalleTransacDetail = new CustomerWalletTransactionDetail();
                                    CustoWalleTransacDetail.CustomerWalletTransactionId = customerWalletTransaction.CustomerWalletTransactionId;
                                    CustoWalleTransacDetail.ReferenceTable = "CashbackTransaction";
                                    CustoWalleTransacDetail.ReferenceId = cashbacktransaction.CashBackTransactionId.ToString();
                                    CustoWalleTransacDetail.Amount = dto.MaximumCashbackAmount;
                                    CustoWalleTransacDetail.CustomerId = dto.CustomerId;
                                    _context.CustomerWalletTransactionDetail.Add(CustoWalleTransacDetail);
                                    await _context.SaveChangesAsync();
                                    //await transaction.CommitAsync();
                                    //_context.Entry(customerWalletTransDetail).CurrentValues.SetValues(CustoWalleTransacDetail);

                                    //_context.Entry(customerWalletTrans).CurrentValues.SetValues(customerWalletTransaction);

                                }
                                else {
                                    throw new Exception("Invalid request.");
                                }
                            }
                            await transaction.CommitAsync();
                            return dto;
                        }
                    }
                    return dto;
                }
                catch (Exception ex)
                {
                    await transaction.RollbackAsync();
                    throw new Exception("Invalid request.");
                }
            }
        }
        public async Task<List<CashBackMasterVM>> GetCashBackMaster()
        {
            List<CashBackMasters> cashBackMaster = await _context.CashBackMaster.ToListAsync();

            List<CashBackMasterVM> data = _mapper.Map<List<CashBackMasters>, List<CashBackMasterVM>>(cashBackMaster);

            return data;
        }
        public async Task<CashBackMasterVM> GetCashBackMasterById(int id)
        {
            CashBackMasters cashBackMaster = await _context
               .CashBackMaster
               .SingleOrDefaultAsync(x => x.CustomerId == id);
            return _mapper.Map<CashBackMasters, CashBackMasterVM>(cashBackMaster);
        }
        public async Task Delete(int id)
        {
            if (id > 0)
            {
                CashBackMasters cashbackMaster = _context.CashBackMaster.Find(id);
                if (cashbackMaster != null)
                {
                    _context.CashBackMaster.Remove(cashbackMaster);
                    await _context.SaveChangesAsync();
                }
            }
        }
    }
}
