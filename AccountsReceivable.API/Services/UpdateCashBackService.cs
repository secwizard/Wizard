using AccountsReceivable.API.Data;
using AccountsReceivable.API.Helpers;
using AccountsReceivable.API.Models;
using AccountsReceivable.API.Models.RequestModel;
using AccountsReceivable.API.Services.Interface;
using AutoMapper;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;

namespace AccountsReceivable.API.Services
{
    public class UpdateCashBackService : IUpdateCashBackService
    {
        private readonly AccountReceivableDataContext _context;
        private readonly IMapper _mapper;
        public UpdateCashBackService(AccountReceivableDataContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }
        public async Task<Response<CashbackMasterRequest>> AddCashBackForCustomer(CashbackMasterRequest dto)
        {
            Response<CashbackMasterRequest> responseobj = new Response<CashbackMasterRequest>();

            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (dto != null)
                    {
                        if (dto.CustomerId != null)
                        {
                            CashBackMasters CashBackMaster = new CashBackMasters();
                            CustomerWallet CustomerWallet = await _context.CustomerWallet.FirstOrDefaultAsync(x => x.CustomerId == dto.CustomerId);
                            if (CustomerWallet.TotalBusinessAmount > 1000)
                            {
                                CashBackMaster.CashbackValue = CustomerWallet.TotalBusinessAmount * dto.CashBackPercentage / 100;
                                CashBackMaster.MinimumBusinessAmount = CustomerWallet.TotalBusinessAmount;
                                CashBackMaster.MaximumCashbackAmount = 50;
                                CashBackMaster.IsPercentage = dto.CashBackPercentage;
                                CashBackMaster.CustomerId = dto.CustomerId;
                                CashBackMaster.IsActive = true;
                                _context.CashBackMaster.Add(CashBackMaster);
                                //_context.Entry(CashBackMaster).CurrentValues.SetValues(dto);
                            }
                            else
                            {
                                responseobj.Data = null;
                                responseobj.Status.Code = (int)HttpStatusCode.NotFound;
                                responseobj.Status.Message = "TotalBusinessAmount Is less than 1000";
                                responseobj.Status.Response = "failed";
                            }
                            int id = await _context.SaveChangesAsync();
                            if (id > 0)
                            {
                                CashBackTransaction cashbackTrans = await _context.CashBackTransaction.FirstOrDefaultAsync(x => x.CustomerId == dto.CustomerId);
                                CashBackTransaction cashbacktransaction = new CashBackTransaction();
                                if (cashbackTrans == null)
                                {
                                    cashbacktransaction.CustomerId = dto.CustomerId;
                                    cashbacktransaction.AutogeneratedCashVackValue = CustomerWallet.TotalBusinessAmount * dto.CashBackPercentage / 100;
                                    cashbacktransaction.ActualCashbackValue = CustomerWallet.TotalBusinessAmount * dto.CashBackPercentage / 100;
                                    cashbacktransaction.AppliedDateTime = DateTime.Now;
                                    cashbacktransaction.IsActive = true;
                                    _context.CashBackTransaction.Add(cashbacktransaction);
                                }
                                else
                                {
                                    _context.Entry(cashbackTrans).CurrentValues.SetValues(dto);
                                }
                                await _context.SaveChangesAsync();
                                //CustomerWallet CustomerWalletOld = await _context.CustomerWallet.FirstOrDefaultAsync(x => x.CustomerId == dto.CustomerId);
                                if (CustomerWallet != null)
                                {
                                    CustomerWallet CustomerWalletOld = new CustomerWallet();
                                    CustomerWalletOld.CreditLimit = CustomerWallet.CreditLimit + CustomerWallet.TotalBusinessAmount * dto.CashBackPercentage / 100;
                                   // CustomerWallet.CreditLimit = CustomerWalletOld.CreditLimit;
                                    CustomerWalletOld.CustomerWalletId = CustomerWallet.CustomerWalletId;
                                    CustomerWalletOld.TotalBusinessAmount = CustomerWallet.TotalBusinessAmount;
                                    CustomerWalletOld.TotalPaidAmount = CustomerWallet.TotalPaidAmount;
                                    CustomerWalletOld.DueAmount = CustomerWallet.DueAmount;
                                    CustomerWalletOld.CreatedBy = CustomerWallet.CreatedBy;
                                    CustomerWalletOld.CreatedDate = CustomerWallet.CreatedDate;
                                    CustomerWalletOld.ModifiedBy = CustomerWallet.ModifiedBy;
                                    CustomerWalletOld.ModifiedDate = CustomerWallet.ModifiedDate;
                                    CustomerWalletOld.CustomerId = CustomerWallet.CustomerId;
                                    _context.Entry(CustomerWallet).CurrentValues.SetValues(CustomerWalletOld);
                                    await _context.SaveChangesAsync();
                                    CustomerWalletTransaction customerWalletTransaction = new CustomerWalletTransaction();
                                    customerWalletTransaction.CustomerWalletId = CustomerWallet.CustomerWalletId;
                                    customerWalletTransaction.TransactionAmount = CustomerWallet.TotalBusinessAmount * dto.CashBackPercentage / 100;
                                    customerWalletTransaction.TransactionType = "CashbackDeposit";
                                    customerWalletTransaction.TransactionModeId = 4;
                                    customerWalletTransaction.CreatedDate = DateTime.Now;
                                    customerWalletTransaction.CustomerId = dto.CustomerId;
                                    _context.CustomerWalletTransaction.Add(customerWalletTransaction);
                                    await _context.SaveChangesAsync();
                                    CustomerWalletTransactionDetail CustoWalleTransacDetail = new CustomerWalletTransactionDetail();
                                    CustoWalleTransacDetail.CustomerWalletTransactionId = customerWalletTransaction.CustomerWalletTransactionId;
                                    CustoWalleTransacDetail.ReferenceTable = "CashbackTransaction";
                                    CustoWalleTransacDetail.ReferenceId = cashbacktransaction.CashBackTransactionId.ToString();
                                    CustoWalleTransacDetail.Amount = CustomerWallet.TotalBusinessAmount * dto.CashBackPercentage / 100;
                                    CustoWalleTransacDetail.CreatedDate = DateTime.Now;
                                    CustoWalleTransacDetail.CustomerId = dto.CustomerId;
                                    _context.CustomerWalletTransactionDetail.Add(CustoWalleTransacDetail);
                                    await _context.SaveChangesAsync();
                                    //await transaction.CommitAsync();
                                    //_context.Entry(customerWalletTransDetail).CurrentValues.SetValues(CustoWalleTransacDetail);

                                    //_context.Entry(customerWalletTrans).CurrentValues.SetValues(customerWalletTransaction);

                                }
                                else
                                {
                                    responseobj.Data = null;
                                    responseobj.Status.Code = (int)HttpStatusCode.NotFound;
                                    responseobj.Status.Message = "Invalid request";
                                    responseobj.Status.Response = "failed";
                                }
                            }
                            await transaction.CommitAsync();
                        }
                    }
                    else
                    {
                        responseobj.Data = null;
                        responseobj.Status.Code = (int)HttpStatusCode.NotFound;
                        responseobj.Status.Message = "Invalid request";
                        responseobj.Status.Response = "failed";
                    }
                }
                catch (Exception ex)
                {
                    responseobj.Data = null;
                    responseobj.Status.Code = (int)HttpStatusCode.NotFound;
                    responseobj.Status.Message = ex.ToString();
                    responseobj.Status.Response = "failed";
                    await transaction.RollbackAsync();
                   // throw new Exception(ex.Message.ToString());
                }
                return responseobj;
            }
        }
    }
}
